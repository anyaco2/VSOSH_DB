// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VSOSH.Dal;

#nullable disable

namespace VSOSH.Dal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121160604_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VSOSH.Domain.Entities.SchoolOlympiadResultBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("CurrentCompeting")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentGrade");

                    b.Property<double>("FinalScore")
                        .HasColumnType("double precision");

                    b.Property<int>("GradeCompeting")
                        .HasColumnType("integer")
                        .HasColumnName("GradeCompeting");

                    b.Property<string>("ParticipantCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ParticipantCode");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("Percentage");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("School");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.ComplexProperty<Dictionary<string, object>>("StudentName", "VSOSH.Domain.Entities.SchoolOlympiadResultBase.StudentName#StudentName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("MiddleName");
                        });

                    b.HasKey("Id");

                    b.ToTable("SchoolOlympiadResultBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VSOSH.Domain.Entities.PhysicalEducationResult", b =>
                {
                    b.HasBaseType("VSOSH.Domain.Entities.SchoolOlympiadResultBase");

                    b.Property<double>("FinalScoreInPractice")
                        .HasColumnType("double precision")
                        .HasColumnName("FinalScoreInPractice");

                    b.Property<double>("FinalScoreInTheory")
                        .HasColumnType("double precision")
                        .HasColumnName("FinalScoreInTheory");

                    b.Property<double>("PreliminaryScoreInPractice")
                        .HasColumnType("double precision")
                        .HasColumnName("PreliminaryScoreInPractice");

                    b.Property<double>("PreliminaryScoreInTheory")
                        .HasColumnType("double precision")
                        .HasColumnName("PreliminaryScoreInTheory");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Sex");

                    b.ToTable("PhysicalEducationResult", (string)null);
                });

            modelBuilder.Entity("VSOSH.Domain.Entities.TechnologyResult", b =>
                {
                    b.HasBaseType("VSOSH.Domain.Entities.SchoolOlympiadResultBase");

                    b.Property<string>("DirectionPractice")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DirectionPractice");

                    b.ToTable("TechnologyResult", (string)null);
                });

            modelBuilder.Entity("VSOSH.Domain.Entities.PhysicalEducationResult", b =>
                {
                    b.HasOne("VSOSH.Domain.Entities.SchoolOlympiadResultBase", null)
                        .WithOne()
                        .HasForeignKey("VSOSH.Domain.Entities.PhysicalEducationResult", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VSOSH.Domain.Entities.TechnologyResult", b =>
                {
                    b.HasOne("VSOSH.Domain.Entities.SchoolOlympiadResultBase", null)
                        .WithOne()
                        .HasForeignKey("VSOSH.Domain.Entities.TechnologyResult", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
